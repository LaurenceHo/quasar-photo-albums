service: photo-album-api
provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: ${env:AWS_REGION_NAME}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${env:PHOTO_ALBUMS_TABLE_NAME}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${env:PHOTO_ALBUM_TAGS_TABLE_NAME}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${env:PHOTO_USER_PERMISSION_TABLE_NAME}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${env:DATA_AGGREGATIONS_TABLE_NAME}
        - Effect: Allow
          Action:
            - s3:ListBucket
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}
            - arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin

useDotenv: true

functions:
  app:
    handler: src/app.handler
    events:
      - http: ANY /
      - http: ANY /{proxy+}
    environment:
      AWS_REGION_NAME: ${env:AWS_REGION_NAME}
      GOOGLE_PLACES_API_KEY: ${env:GOOGLE_PLACES_API_KEY}
      GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
      ALBUM_URL: ${env:ALBUM_URL}
      IMAGEKIT_CDN_URL: ${env:IMAGEKIT_CDN_URL}
      AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
      PHOTO_ALBUMS_TABLE_NAME: ${env:PHOTO_ALBUMS_TABLE_NAME}
      PHOTO_ALBUM_TAGS_TABLE_NAME: ${env:PHOTO_ALBUM_TAGS_TABLE_NAME}
      PHOTO_USER_PERMISSION_TABLE_NAME: ${env:PHOTO_USER_PERMISSION_TABLE_NAME}
      DATA_AGGREGATIONS_TABLE_NAME: ${env:DATA_AGGREGATIONS_TABLE_NAME}
      JWT_SECRET: ${env:JWT_SECRET}
  aggregations:
    handler: src/aggregations/albums.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [AlbumTable, StreamArn]

resources:
  Resources:
    QuasarPhotoAlbumBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      UpdateReplacePolicy: Retain
      Properties:
        BucketName: ${env:AWS_S3_BUCKET_NAME}
        VersioningConfiguration:
          Status: Enabled
        LifecycleConfiguration:
          Rules:
            - Id: DeleteNonCurrentVersions
              Prefix: NonCurrentVersion
              Status: Enabled
              NoncurrentVersionExpiration:
                NoncurrentDays: 60
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
              AllowedOrigins:
                - 'http://localhost:9000'
                - 'http://${env:AWS_S3_BUCKET_NAME}.s3-website-${env:AWS_REGION_NAME}.amazonaws.com'
                - !Join
                  - ''
                  - - 'https://'
                    - !GetAtt PhotoAlbumsDistribution.DomainName
              ExposedHeaders:
                - Date
              MaxAge: 3600
    BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Id: QuasarPhotoAlbumBucketPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref QuasarPhotoAlbumBucket
                  - /*
        Bucket: !Ref QuasarPhotoAlbumBucket
    PhotoAlbumsDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          IPV6Enabled: 'true'
          Origins:
            - Id: QuasarPhotoAlbumOrigin
              DomainName: ${env:AWS_S3_BUCKET_NAME}.s3-website-${env:AWS_REGION_NAME}.amazonaws.com
              CustomOriginConfig:
                OriginProtocolPolicy: http-only
                HTTPPort: '80'
          Enabled: 'true'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            TargetOriginId: QuasarPhotoAlbumOrigin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: none
            ViewerProtocolPolicy: https-only
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'
    AlbumTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PHOTO_ALBUMS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
        DeletionProtectionEnabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: KEYS_ONLY
    AlbumTagTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PHOTO_ALBUM_TAGS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: tag
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 1
        DeletionProtectionEnabled: true
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
    UserPermissionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PHOTO_USER_PERMISSION_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
          - AttributeName: email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        DeletionProtectionEnabled: true
    AggregationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DATA_AGGREGATIONS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 4
          WriteCapacityUnits: 4
        DeletionProtectionEnabled: true

custom:
  dotenv:
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
